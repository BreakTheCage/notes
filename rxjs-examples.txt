<h1>RxJS playground</h1>

<p>Open the console below to see results</p>
<button>Click me!</button>
<input id="input1"/>
<input id="input2"/>

<p>Combined Value: <span></span></p>
<div></div>




import { fromEvent, Observable, interval, Subject, BehaviorSubject, of } from 'rxjs';
import { throttleTime, map, scan, filter, debounceTime, distinctUntilChanged, reduce, pluck, mergeMap,switchMap } from 'rxjs/operators';

const button = document.querySelector('button');
const input = document.querySelector('#input1');
const input2 = document.querySelector('#input2');
const span = document.querySelector('span');
const div = document.querySelector('div');

//11:behaviorSubject()
const clickEmitter = new BehaviorSubject("Not Clicked!");

button.addEventListener('click', () => {
  clickEmitter.next('Clicked!')
})
  
clickEmitter
.subscribe(
  (value: string) => { div.textContent = value }
);





// //10:switchMap()

// const obs1 = fromEvent(button, 'click');

// const obs2 = interval(1000);
  
// obs1.pipe(
//   switchMap(
//     event => {
//       return obs2
//     }
//   )
// )
// .subscribe(
//   (value) => console.log(value)
// )


// //9:mergeMap()

// const obs1 = fromEvent(input, 'input');

// const obs2 = fromEvent(input2, 'input');
  
// obs1.pipe(
//   mergeMap((event1) => {
//     return obs2.pipe(map((event2) => {
//       return event1.target.value + " " + event2.target.value
//     }))
//   })
// )
// .subscribe(conmbinedVal => {
//   span.textContent = conmbinedVal;
//   // console.log(conmbinedVal);
// })


// 8:pluck()
// const observable = fromEvent(input, 'input');
  
//   observable
//   .pipe(
//     pluck('target', 'value'),
//     debounceTime(500),
//     distinctUntilChanged()
//   )
//   .subscribe({
//     next: function (value) {
//       console.log(value);
//     }
//   })



//7:reduce(), scan()

// const observable = of(1,2,3,4,5);
  
//   observable
//   .pipe(
//     scan((total, currentValue) => {
//       return total + currentValue;
//     }, 0)
//   )
//   .subscribe({
//     next: function (value) {
//       console.log(value);
//     }
//   })

  // observable
  // .pipe(
  //   reduce((total, currentValue) => {
  //     return total + currentValue;
  //   }, 0)
  // )
  // .subscribe({
  //   next: function (value) {
  //     console.log(value);
  //   }
  // })


// //6: debounceTime & distinctUntilChanged

// const observable = fromEvent(input, 'input');
  
//   observable
//   .pipe(
//     map(event => event.target.value),
//     debounceTime(500),
//     distinctUntilChanged()
//   )
//   .subscribe({
//     next: function (value) {
//       console.log(value);
//     }
//   })

//5) filter(): Lecture
// const observabel = interval(1000);

// observabel
// .pipe(
//   filter(function(value) {
//     return value % 2 == 0;
//   })
// )
// .subscribe({
//   next: function(value) {
//     console.log(value)
//   },
//   error: function(error) {
//     console.log(error);
//   },
//   complete: function() {
//     console.log('Completed!')
//   }
// })

// button.addEventListener('click', (event) => console.log(event));
//4th) Subject(): Lecture Examples
// const subject = new Subject();
// subject.subscribe({
//   next: function(value) {
//     console.log(value)
//   },
//   error: function(error) {
//     console.log(error);
//   },
//   complete: function() {
//     console.log('Completed!')
//   }
// })

// subject.subscribe({
//   next: function(value) {
//     console.log(value + 'Second subscribe')
//   }
// });

// subject.next('A new Data piece!');
// subject.complete();
// subject.error('It is a Error!');


//3d) interval(): Lecture Completed!
// const observabel = interval(1000);
// const observer = {
//   next: function(value) {
//     console.log(value);
//   },
//   error: function(error) {

//   },
//   complete: function() {

//   }
// }

// observabel.pipe(
//   map(function(value) {
//   return 'Hello' + value;
//   }),
//   throttleTime(2000)
// )
// .subscribe(observer);




//2nd: Lecture Example

// const observer = {
//   next: function(value) {
//     console.log(value);
//   },
//   error: function(error) {
//     console.log(error)
//   },
//   complete: function() {
//     console.log('Completet!')
//   }
// }

// const subscription = Observable.create(function(obs) {
//   button.onclick = function(event) {
//     obs.next(event);
//   }
// })
// .subscribe(observer);

// setTimeout(function(){
//   subscription.unsubscribe();
// },5000);

// Observable.create(function(obs) {
//   obs.next('A value');
//   // obs.error('Error!');
//   setTimeout(function(){
//     obs.complete();
//   },2000);
//   obs.next('Second Value!')
// })
// .subscribe(observer);

// fromEvent(button, 'click')
//   .subscribe(observer);



// fromEvent(button, 'click')
//   .subscribe(value => {
//     console.log(value.clientX)
//   })


// fromEvent(button, 'click')
//   .pipe(
//     throttleTime(1000),
//     map(data => data.clientY)
//   )
//   .subscribe(coordinate => {
//     console.log(coordinate)
//   })



// fromEvent(document, 'click')
//   .pipe(
//     throttleTime(1000),
//     map(event => event.clientX),
//     scan((count, clientX) => count + clientX, 0)
//   )
//   .subscribe(count => console.log(count));